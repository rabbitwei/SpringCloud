1. Ribbon 概念
    我们准备访问前面注册好的数据微服务了。 springCloud 提供了两种方式，一种是 Ribbon，一种是 Feign。
    Ribbon 是使用 restTemplate 进行调用，并进行客户端负载均衡。

  1.1. 什么是 Feign？
            Feign 是对 Ribbon的封装，调用起来更简单（更多使用的是 Feign, 而很少使用 Ribbon）

2. 什么是客户端负载均衡?
    在前面 注册数据微服务 里，注册了8001和8002两个微服务（其实是一个 model 修改端口后启动了两次），
    Ribbon 会从注册中心获知这个信息，然后由 Ribbon 这个客户端自己决定是调用哪个，这个就叫做客户端负载均衡。

3. 配置 Ribbon 子项目的 pom.xml：
    1. 添加 spring boot 对 web 的支持
    2. 添加 spring-cloud-starter-netflix-eureka-clien， 表示该项目是 eureka 客户端
    4. 添加 spring boot 对 thymeleaf 的支持

4. 使用 Ribbon：
    新建一个客户端类，通过 RestTemplate 来调用，调用方式如下：
        //注意看，这里只是指定了要访问的微服务名称和要访问哪个控制器(映射成了路径)，但是并没有指定端口号到底是 8001, 还是 8002.
        return restTemplate.getForObject("http://PRODUCTDATASERVICE/listProduct", List.class);
    Ribbon 不用通过 url 和端口号来访问微服务的，而是通过微服务的名称来方法的。
    listProduct 表示访问哪个控制器

5.启动类设置：
    5.1 添加注解 @EnableDiscoveryClient      //表示用于发现 eureka 注册中心的微服务。
        Eureka 的客户端和服务端不需要该注解
    5.2 添加客户端负载均衡的函数：
            //表示用 restTemplate 这个工具来做负载均衡
            @Bean
            @LoadBalanced
            RestTemplate restTemplate() {
                return new RestTemplate();
            }

6. 配置文件的设置（resources 目录下的 templates 目录下 创建 application.yml，
默认 resources 和 templates 目录都是没有的）：
    1. 设置端口号为： 8010（自定义）
    2. 访问注册中心路由
    4. 设置 thymeleaf 的配置
    4. 应用程序名

7.调用原理：
    1. 首先数据微服务和视图微服务都被 eureka 管理起来了。
    2. 数据服务是由两个实例的集群组成的，端口分别是 8001 ， 8002
    3. 视图微服务通过 注册中心调用微服务， 然后负载均衡到 8001 或者 8002 端口的应用上。



7. 启动顺序：
    Eureka 服务端 -> 数据服务 -> Ribbon 客户端负载均衡（视图微服务）。
